/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [7:0] led1x,
    output reg [7:0] led1y,
    output reg [7:0] led2x,
    output reg [7:0] led2y,
    output reg [7:0] led3x,
    output reg [7:0] led3y,
    output reg [7:0] led4x,
    output reg [7:0] led4y,
    output reg player1_punch,
    output reg player2_punch,
    input player1_yes,
    input player1_no,
    input player2_yes,
    input player2_no,
    output reg [4:0] player1_hp,
    output reg [4:0] player2_hp
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_eqm_led1x;
  wire [8-1:0] M_eqm_led1y;
  wire [8-1:0] M_eqm_led2x;
  wire [8-1:0] M_eqm_led2y;
  wire [8-1:0] M_eqm_led3x;
  wire [8-1:0] M_eqm_led3y;
  wire [8-1:0] M_eqm_led4x;
  wire [8-1:0] M_eqm_led4y;
  wire [1-1:0] M_eqm_player1_punch;
  wire [1-1:0] M_eqm_player2_punch;
  wire [1-1:0] M_eqm_out;
  wire [10-1:0] M_eqm_heath_points;
  reg [1-1:0] M_eqm_clk;
  reg [1-1:0] M_eqm_rst;
  reg [1-1:0] M_eqm_slowclk;
  reg [4-1:0] M_eqm_button;
  reg [1-1:0] M_eqm_generateRandom;
  dataPathAlu_1 eqm (
    .clk(M_eqm_clk),
    .rst(M_eqm_rst),
    .slowclk(M_eqm_slowclk),
    .button(M_eqm_button),
    .generateRandom(M_eqm_generateRandom),
    .led1x(M_eqm_led1x),
    .led1y(M_eqm_led1y),
    .led2x(M_eqm_led2x),
    .led2y(M_eqm_led2y),
    .led3x(M_eqm_led3x),
    .led3y(M_eqm_led3y),
    .led4x(M_eqm_led4x),
    .led4y(M_eqm_led4y),
    .player1_punch(M_eqm_player1_punch),
    .player2_punch(M_eqm_player2_punch),
    .out(M_eqm_out),
    .heath_points(M_eqm_heath_points)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_slowclk_value;
  counter_4 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  reg [26:0] M_counter1_d, M_counter1_q = 1'h0;
  
  always @* begin
    M_counter1_d = M_counter1_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_eqm_rst = rst;
    M_eqm_clk = clk;
    M_eqm_slowclk = M_slowclk_value;
    led1x = M_eqm_led1x;
    led1y = M_eqm_led1y;
    led2x = M_eqm_led2x;
    led2y = M_eqm_led2y;
    led3x = M_eqm_led3x;
    led3y = M_eqm_led3y;
    led4x = M_eqm_led4x;
    led4y = M_eqm_led4y;
    M_counter1_d = M_counter1_q + 1'h1;
    player1_hp = M_eqm_heath_points[0+4-:5];
    player2_hp = M_eqm_heath_points[5+4-:5];
    M_edge_detector_in = M_counter1_q[26+0-:1];
    M_eqm_generateRandom = M_edge_detector_out;
    M_eqm_button[0+0-:1] = player1_yes;
    M_eqm_button[1+0-:1] = player1_no;
    M_eqm_button[2+0-:1] = player2_yes;
    M_eqm_button[3+0-:1] = player2_no;
    player1_punch = M_eqm_player1_punch;
    player2_punch = M_eqm_player2_punch;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter1_q <= 1'h0;
    end else begin
      M_counter1_q <= M_counter1_d;
    end
  end
  
endmodule
