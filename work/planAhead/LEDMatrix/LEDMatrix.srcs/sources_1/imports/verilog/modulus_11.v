/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module modulus_11 (
    input [7:0] a,
    input clk,
    input rst,
    input [7:0] alufnc,
    output reg [5:0] alufn,
    output reg [7:0] alufna,
    output reg [7:0] alufnb,
    output reg [15:0] out,
    input start_mod,
    output reg done
  );
  
  
  
  localparam IDLE_state = 3'd0;
  localparam DIV_state = 3'd1;
  localparam MUL_state = 3'd2;
  localparam MINUS_state = 3'd3;
  localparam SEND_state = 3'd4;
  localparam POS_COUNTER_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  reg [7:0] M_div_value_d, M_div_value_q = 1'h0;
  reg [7:0] M_mul_value_d, M_mul_value_q = 1'h0;
  reg [7:0] M_min_value_d, M_min_value_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_div_value_d = M_div_value_q;
    M_mul_value_d = M_mul_value_q;
    M_min_value_d = M_min_value_q;
    
    alufn = 6'h00;
    alufna = 8'h00;
    alufnb = 8'h00;
    done = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        if (start_mod) begin
          done = 1'h0;
          if (a < 7'h64) begin
            M_state_d = DIV_state;
          end else begin
            if (a > 7'h64) begin
              M_state_d = POS_COUNTER_state;
            end
          end
        end
      end
      POS_COUNTER_state: begin
        done = 1'h0;
        alufn = 6'h01;
        alufna = 2'h0;
        alufnb = a;
        M_min_value_d = alufnc;
        M_div_value_d = 10'h00b;
        M_state_d = SEND_state;
      end
      DIV_state: begin
        done = 1'h0;
        alufn = 6'h09;
        alufna = a;
        alufnb = 4'ha;
        M_div_value_d = alufnc;
        M_state_d = MUL_state;
      end
      MUL_state: begin
        done = 1'h0;
        alufn = 6'h02;
        alufna = M_div_value_q;
        alufnb = 4'ha;
        M_mul_value_d = alufnc;
        M_state_d = MINUS_state;
      end
      MINUS_state: begin
        done = 1'h0;
        alufn = 6'h01;
        alufna = a;
        alufnb = M_mul_value_q;
        M_min_value_d = alufnc;
        M_state_d = SEND_state;
      end
      SEND_state: begin
        done = 1'h1;
        M_state_d = IDLE_state;
      end
    endcase
    out[0+0+7-:8] = M_div_value_q;
    out[8+0+7-:8] = M_min_value_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_div_value_q <= 1'h0;
      M_mul_value_q <= 1'h0;
      M_min_value_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_div_value_q <= M_div_value_d;
      M_mul_value_q <= M_mul_value_d;
      M_min_value_q <= M_min_value_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
